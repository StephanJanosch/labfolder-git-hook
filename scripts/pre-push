#!/usr/bin/env bash

# Author: Stephan Janosch, janosch@mpi-cbg.de

# If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
PROJECT_ID_FILE="projectId.sh"
CREDENTIALSFILE="$HOME/.labfolder_credentials.sh"
TOKENFILE="$HOME/.labfolder_token.sh"

if [ ! -f $PROJECT_ID_FILE ]
then
    echo "error: No Labfolder Project ID found: projectId.sh"
    exit 1
else
    source $PROJECT_ID_FILE
fi

if [ ! -f $CREDENTIALSFILE ]
then
    echo "did not found $CREDENTIALSFILE. Please check https://gitlab.gwdg.de/labfolder-api-tools/git-hook/blob/master/README.md"
    exit 1
else
    source $CREDENTIALSFILE
fi

if [  -f $TOKENFILE ]
then
    source $TOKENFILE
else
    TOKEN=""
fi

#$USER
#$PASSWORD
#$LABFOLDER_HOST
#$TOKEN

#do a dummy call to check validity of token
PROJECTS=`curl -f  -s -u "$TOKEN:" -G  "https://$LABFOLDER_HOST/api/v2/projects?limit=&offset="`
if [ $? == "22" ]
then
#    curl failed, now check for the reason
    PROJECTS=`curl  -s -u "$TOKEN:" -G  "https://$LABFOLDER_HOST/api/v2/projects?limit=&offset="`
    MESSAGE=`echo $PROJECTS | jq -r '.message'`
    if [[ $MESSAGE == "Invalid token" ]]
    then
        #invalid token, so get a new one
        echo "No valid labfolder token found. Aquriring new one."
        echo "user provided: $USER. Please enter password on $LABFOLDER_HOST"
        #reading from /dev/tty fixed bash
        read -s -p "password: " PASSWORD </dev/tty
        POSTAUTH="{\"user\":\"$USER\",\"password\":\"$PASSWORD\"}"
        RESULT=`curl -s -H "Content-Type: application/json"  -X POST -d "$POSTAUTH" "https://$LABFOLDER_HOST/api/v2/auth/login"`
        MESSAGE=`echo $RESULT | jq -r '.message'`
        if [[ $MESSAGE == "Invalid login" ]]
        then
        	echo "Error from Labfolder: $MESSAGE"
        	echo "Exiting"
        	exit 1
        fi
        TOKEN=`echo "$RESULT" | jq -r '.token'`
        echo "#!/usr/bin/env bash" > "$TOKENFILE"
        echo "TOKEN=\"$TOKEN\"" >> "$TOKENFILE"
        echo "token saved to $TOKENFILE"
    fi
fi

# we have a valid $TOKEN

#create entry
POSTJSON="{\"title\": \"git push\",\"project_id\": \"$PROJECTID\"}"
ENTRY=`curl -s -f -u "$TOKEN:" -H "Content-Type: application/json" -X POST -d "$POSTJSON" "https://$LABFOLDER_HOST/api/v2/entries"`
if [ $? != 0 ]
then
    echo "error: could not create labfolder entry"
    exit 1
fi
ENTRID=`echo $ENTRY | jq -r '.id'`

remote="$1"
url="$2"

while read local_ref local_sha remote_ref remote_sha
do
		LOGMESSAGE=`git log --pretty=format:"%s" $remote_sha..$local_sha | tr '\n' ', '`
        POSTJSON="{\"entry_id\": \"$ENTRID\",  \"data_elements\": [ \
    { \
      \"type\": \"DATA_ELEMENT_GROUP\", \
      \"title\": \"Push\", \
      \"children\": [ \
{\"type\": \"DESCRIPTIVE_DATA_ELEMENT\",\"title\": \"log messages\",\"description\": \"$LOGMESSAGE\"}, \
{\"type\": \"DESCRIPTIVE_DATA_ELEMENT\",\"title\": \"local_ref\",\"description\": \"$local_ref\"}, \
{\"type\": \"DESCRIPTIVE_DATA_ELEMENT\",\"title\": \"local_sha\",\"description\": \"$local_sha\"}, \
{\"type\": \"DESCRIPTIVE_DATA_ELEMENT\",\"title\": \"remote_ref\",\"description\": \"$remote_ref\"}, \
{\"type\": \"DESCRIPTIVE_DATA_ELEMENT\",\"title\": \"remote_sha\",\"description\": \"$remote_sha\"}, \
{\"type\": \"DESCRIPTIVE_DATA_ELEMENT\",\"title\": \"remote\",\"description\": \"$remote\"}, \
{\"type\": \"DESCRIPTIVE_DATA_ELEMENT\",\"title\": \"url\",\"description\": \"$url\"} \
      ]\
    }\
]}"

curl -f -s -S -u "$TOKEN:" -H "Content-Type: application/json" -X POST -d "$POSTJSON" "https://$LABFOLDER_HOST/api/v2/elements/data" > /dev/null
        if [ $? != 0 ]
        then
            echo "error: could not create labfolder data element entry"
            echo $POSTJSON | jq
            exit 1
        fi
done
exit 0
